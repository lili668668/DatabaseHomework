start 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (147ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (96ms)
    √ employee complex json object array bulk operations (139ms)
    √ employee insert/select with non primary key (172ms)
    √ employee insert - update a single column (174ms)
    √ bulk insert/select datetime column batchSize 1 (107ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (39ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (97ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (128ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (84ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2008ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (43ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (318ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (18s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (88ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field (50ms)
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (107ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (88ms)
    √ employee complex json object array bulk operations (269ms)
    √ employee insert/select with non primary key (92ms)
    √ employee insert - update a single column (76ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (119ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (39ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (78ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2009ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2013ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (321ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (19s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (84ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (106ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (82ms)
    √ employee complex json object array bulk operations (68ms)
    √ employee insert/select with non primary key (90ms)
    √ employee insert - update a single column (85ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (88ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (102ms)
    √ bulk insert simple multi-column object in batches 10 (90ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2008ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (274ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (18s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (104ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (106ms)
    √ employee complex json object array bulk operations (151ms)
    √ employee insert/select with non primary key (90ms)
    √ employee insert - update a single column (118ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (40ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2008ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2011ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (294ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (18s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (92ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (118ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (83ms)
    √ employee complex json object array bulk operations (161ms)
    √ employee insert/select with non primary key (185ms)
    √ employee insert - update a single column (109ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (38ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (95ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (85ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2006ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2024ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (109ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (436ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (19s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (97ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (114ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (87ms)
    √ employee complex json object array bulk operations (126ms)
    √ employee insert/select with non primary key (69ms)
    √ employee insert - update a single column (71ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (128ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (68ms)
    √ bulk insert/update/select bit column 10 (43ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (40ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (43ms)
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2011ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (271ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (18s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number (40ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (95ms)
    √ bulk insert/select varbinary column batchSize 1 (111ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (107ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (113ms)
    √ employee complex json object array bulk operations (153ms)
    √ employee insert/select with non primary key (66ms)
    √ employee insert - update a single column (189ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (41ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2007ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (271ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (18s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (123ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (100ms)
    √ employee complex json object array bulk operations (185ms)
    √ employee insert/select with non primary key (134ms)
    √ employee insert - update a single column (59ms)
    √ bulk insert/select datetime column batchSize 1 (80ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (42ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (81ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2009ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (53ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (304ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (18s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (57ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (109ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (82ms)
    √ employee complex json object array bulk operations (117ms)
    √ employee insert/select with non primary key (151ms)
    √ employee insert - update a single column (60ms)
    √ bulk insert/select datetime column batchSize 1 (82ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (39ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (82ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2007ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2013ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (287ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (18s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (129ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (99ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (81ms)
    √ employee complex json object array bulk operations (148ms)
    √ employee insert/select with non primary key (97ms)
    √ employee insert - update a single column (154ms)
    √ bulk insert/select datetime column batchSize 1 (94ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (82ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (45ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (93ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2007ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2008ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (279ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (43ms)
    √ test timezone components of datetimeoffset


  179 passing (18s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4000ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (144ms)
    √ bulk insert/select varbinary column batchSize 1 (95ms)
    √ bulk insert/select varbinary column batchSize 10 (123ms)
    √ bulk insert/select null column of datetime batchSize 10 (93ms)
    √ bulk insert/select null column of datetime batchSize 1 (129ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (88ms)
    √ employee complex json object array bulk operations (326ms)
    √ employee insert/select with non primary key (96ms)
    √ employee insert - update a single column (172ms)
    √ bulk insert/select datetime column batchSize 1 (95ms)
    √ bulk insert/select datetime column batchSize 10 (110ms)
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10 (81ms)
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10 (119ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (226ms)
    √ bulk insert/select bit column batchSize 1 (114ms)
    √ bulk insert/select bit column 10 (176ms)
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (119ms)
    √ bulk insert/select decimal column batchSize 10 (93ms)
    √ bulk insert/select/delete decimal column batchSize 10 (110ms)
    √ bulk insert/update/select decimal column batchSize 10 (109ms)
    √ bulk insert/select varchar column batchSize 1 (112ms)
    √ bulk insert/select varchar column batchSize 10 (93ms)
    √ bulk insert/select/delete varchar column batchSize 10 (111ms)
    √ bulk insert/update/select varchar column batchSize 10 (129ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (172ms)
    √ bulk insert simple multi-column object in batches 10 (97ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2016ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2018ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (278ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (20s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (84ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (120ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (103ms)
    √ employee complex json object array bulk operations (84ms)
    √ employee insert/select with non primary key (177ms)
    √ employee insert - update a single column (139ms)
    √ bulk insert/select datetime column batchSize 1 (97ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1 (92ms)
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (84ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2009ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2009ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (307ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (19s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (51ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded (51ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (144ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (103ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (81ms)
    √ employee complex json object array bulk operations (119ms)
    √ employee insert/select with non primary key (90ms)
    √ employee insert - update a single column (166ms)
    √ bulk insert/select datetime column batchSize 1 (91ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (77ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (38ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10 (85ms)
    √ bulk insert/update/select varchar column batchSize 10 (230ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (42ms)
    √ bulk insert simple multi-column object in batches 10 (86ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2007ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2021ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (283ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (19s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text (58ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (76ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (98ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (89ms)
    √ employee complex json object array bulk operations (160ms)
    √ employee insert/select with non primary key (205ms)
    √ employee insert - update a single column (101ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10 (87ms)
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (97ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (91ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (80ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (84ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2007ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (419ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (19s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number (44ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (237ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ bulk insert/update/select int column of signed batchSize 10 (119ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ bulk insert simple multi-column object - default a nullable column 10 (88ms)
    √ employee complex json object array bulk operations (157ms)
    √ employee insert/select with non primary key (84ms)
    √ employee insert - update a single column (78ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (41ms)
    √ bulk insert/select bit column batchSize 1 (100ms)
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (43ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (83ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2010ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (285ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  179 passing (18s)

0
"next " 
{ _: [],
  t: 
   [ 'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit (236ms)
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
^C"next " 
^C"next " 
^C"next " 
